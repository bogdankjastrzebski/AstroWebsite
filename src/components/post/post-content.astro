---
import Tweet from "astro-tweet";
import { type CollectionEntry } from "astro:content";

// MDX Components
import Box from "../box.astro";
import A from "../mdx/a.astro";
import Blockquote from "../mdx/blockquote.astro";
import Br from "../mdx/br.astro";
import Del from "../mdx/del.astro";
import Em from "../mdx/em.astro";
import H1 from "../mdx/h1.astro";
import H2 from "../mdx/h2.astro";
import H3 from "../mdx/h3.astro";
import H4 from "../mdx/h4.astro";
import H5 from "../mdx/h5.astro";
import H6 from "../mdx/h6.astro";
import Hr from "../mdx/hr.astro";
import I from "../mdx/i.astro";
import Img from "../mdx/img.astro";
import Input from "../mdx/input.astro";
import Li from "../mdx/li.astro";
import Notation from "../mdx/notation.astro";
import Ol from "../mdx/ol.astro";
import P from "../mdx/p.astro";
import Strong from "../mdx/strong.astro";
import Table from "../mdx/table.astro";
import Td from "../mdx/td.astro";
import Th from "../mdx/th.astro";
import Tr from "../mdx/tr.astro";
import Ul from "../mdx/ul.astro";

type Props = {
  post: CollectionEntry<"blog">;
};

const { post } = Astro.props;
const { Content } = await post.render();
---

<Content
  components={{
    h1: H1,
    h2: H2,
    h3: H3,
    h4: H4,
    h5: H5,
    h6: H6,
    p: P,
    a: A,
    blockquote: Blockquote,
    img: Img,
    ul: Ul,
    ol: Ol,
    li: Li,
    input: Input,
    table: Table,
    tr: Tr,
    th: Th,
    td: Td,
    strong: Strong,
    em: Em,
    i: I,
    del: Del,
    hr: Hr,
    br: Br,
    // Custom Components
    Box,
    Notation,
    N: Notation,
    Tweet,
  }}
/>

<script>
  import { annotate, annotationGroup } from "rough-notation";
  import { Astro } from 'astro';
  
  const notions = document.querySelectorAll("span[data-notion-identity]");
  const annotations = new Array(notions.length).fill(0).map((_, index) => {
    const node = notions[index] as HTMLSpanElement;
    const type = node.dataset.notionType;
    const color = node.dataset.notionColor;
    const strokeWidth = node.dataset.notionStrokewidth;
    return annotate(node, {
      type: (type as "underline") ?? "underline",
      color: color ?? "red",
      animate: false,
      multiline: type === "bracket" ? false : true,
      brackets: ["left", "right"],
      strokeWidth: Number(strokeWidth) ?? 1.5,
    });
  });
  annotationGroup(annotations).show();
</script>
